// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.9;
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

contract Auction {
    event Buy(address winner, uint amount);

    ERC721 public nft;
    uint public nftId;

    address payable public seller;
    uint public startingPrice;
    uint public startAt;
    uint public expiresAt;
    uint public highestBid;
    address public highestBidder;

    constructor(uint _startingPrice, uint duration) {
        seller = payable(msg.sender);
        startingPrice = _startingPrice;
        startAt = block.timestamp;
        expiresAt = block.timestamp + (duration * 1 days);
    }
    
    function bid(uint price) public payable returns (bool)
    { 
        require(price > highestBid, "can't bid, Make a higher Bid");
        require(block.timestamp < expiresAt, "Auction has expired");
        highestBidder = msg.sender; 
        highestBid = price;
        return true;
    }

    function transferFrom() public payable {
        require(msg.sender == highestBidder);
        require(block.timestamp > expiresAt);
        
        nft.safeTransferFrom(address(this), highestBidder, nftId);
    }
    
    function testTransfer() public payable {
        nft.safeTransferFrom(address(this), msg.sender, nftId);
    }
    
    function configureNFT(address _nft, uint _nftId) public
    {
        nft = ERC721(_nft);
        nftId = _nftId;
    }
}